// Automaticly generated file

extension C.Symbol {
    var visible: Bool {
        switch(self) {
            case .sym_abstract_array_declarator: return true
            case .anon_sym_PLUS: return true
            case .anon_sym_POUNDifndef: return true
            case .anon_sym_EQ: return true
            case .anon_sym_PLUS_PLUS: return true
            case .anon_sym_goto: return true
            case .anon_sym_LBRACE: return true
            case .aux_sym_array_declarator_repeat1: return false
            case .sym_enumerator: return true
            case .sym_for_statement: return true
            case .sym__preproc_statement: return false
            case .sym_bitwise_expression: return true
            case .sym_function_definition: return true
            case .sym_struct_specifier: return true
            case .sym_switch_statement: return true
            case .anon_sym_RBRACK: return true
            case .anon_sym_PIPE_EQ: return true
            case .anon_sym_restrict: return true
            case .sym_abstract_pointer_declarator: return true
            case .sym_pointer_declarator: return true
            case .sym_enum_specifier: return true
            case .anon_sym_AMP_EQ: return true
            case .anon_sym_GT_GT: return true
            case .sym__declaration_specifiers: return false
            case .anon_sym_DASH_GT: return true
            case .sym_relational_expression: return true
            case .sym_abstract_function_declarator: return true
            case .sym_storage_class_specifier: return true
            case .aux_sym_declaration_repeat1: return false
            case .sym_function_specifier: return true
            case .sym_init_declarator: return true
            case .anon_sym_BANG_EQ: return true
            case .aux_sym_preproc_params_repeat1: return false
            case .aux_sym__declaration_specifiers_repeat1: return false
            case .anon_sym_SEMI: return true
            case .anon_sym_STAR: return true
            case .sym_preproc_directive: return true
            case .anon_sym_return: return true
            case .anon_sym_BANG: return true
            case .sym_system_lib_string: return true
            case .aux_sym_struct_specifier_repeat1: return false
            case .aux_sym_preproc_ifdef_repeat1: return false
            case .anon_sym_register: return true
            case .anon_sym_if: return true
            case .anon_sym_const: return true
            case .anon_sym_extern: return true
            case .anon_sym_AMP: return true
            case .sym__empty_declaration: return false
            case .sym_expression_statement: return true
            case .sym_identifier: return true
            case .sym_parameter_type_list: return true
            case .aux_sym_for_statement_repeat1: return false
            case .sym_call_expression: return true
            case .sym_macro_type_specifier: return true
            case .anon_sym_union: return true
            case .anon_sym_switch: return true
            case .sym_return_statement: return true
            case .anon_sym_CARET: return true
            case .anon_sym_for: return true
            case .sym_preproc_ifdef: return true
            case .sym_preproc_params: return true
            case .anon_sym_CARET_EQ: return true
            case .sym_continue_statement: return true
            case .sym__enum_specifier_contents: return false
//          case .ts_builtin_sym_end: return false
            case .anon_sym_struct: return true
            case .anon_sym_POUNDinclude: return true
            case .anon_sym_EQ_EQ: return true
            case .sym_sized_type_specifier: return true
            case .anon_sym_sizeof: return true
            case .sym__expression: return false
            case .sym_union_specifier: return true
            case .sym_cast_expression: return true
            case .anon_sym_LT: return true
            case .sym_number_literal: return true
            case .sym_compound_statement: return true
            case .sym_while_statement: return true
            case .sym_equality_expression: return true
            case .anon_sym_DOT: return true
            case .anon_sym_COLON: return true
            case .anon_sym_continue: return true
            case .sym__type_specifier: return false
            case .anon_sym_PIPE_PIPE: return true
            case .sym_string_literal: return true
            case .sym__declarator: return false
            case .sym_type_qualifier: return true
            case .sym_preproc_arg: return true
            case .anon_sym_RBRACE: return true
            case .sym_math_expression: return true
            case .sym_char_literal: return true
            case .anon_sym_SLASH_EQ: return true
            case .anon_sym_DASH_EQ: return true
            case .anon_sym_POUNDdefine: return true
            case .sym_struct_declaration: return true
            case .anon_sym_auto: return true
            case .aux_sym_sized_type_specifier_repeat1: return false
            case .sym_case_statement: return true
            case .sym__abstract_declarator: return false
            case .sym_declaration: return true
            case .anon_sym_volatile: return true
            case .anon_sym_LT_LT: return true
            case .sym_subscript_expression: return true
            case .sym_preproc_call: return true
            case .sym_preproc_def: return true
            case .anon_sym_RPAREN: return true
            case .sym_sizeof_expression: return true
            case .anon_sym_static: return true
            case .sym_field_expression: return true
            case .sym_preproc_function_def: return true
            case .sym_preproc_else: return true
            case .sym_shift_expression: return true
            case .aux_sym_struct_declaration_repeat1: return false
            case .sym_if_statement: return true
            case .sym_parameter_declaration: return true
            case .sym_preproc_include: return true
            case .anon_sym_else: return true
            case .anon_sym_while: return true
            case .anon_sym_PERCENT: return true
            case .sym_break_statement: return true
            case .anon_sym_GT_GT_EQ: return true
            case .sym_compound_literal_expression: return true
            case .anon_sym_break: return true
            case .anon_sym_LT_EQ: return true
            case .anon_sym_DASH: return true
            case .sym_initializer_list: return true
            case .anon_sym_TILDE: return true
            case .aux_sym_parameter_type_list_repeat1: return false
            case .anon_sym_QMARK: return true
            case .sym_comment: return true
            case .anon_sym_DOT_DOT_DOT: return true
            case .anon_sym_POUNDifdef: return true
            case .anon_sym_default: return true
            case .sym__initializer_list_contents: return false
            case .anon_sym_GT_EQ: return true
            case .anon_sym_PLUS_EQ: return true
            case .sym_goto_statement: return true
            case .anon_sym_typedef: return true
            case .sym_do_statement: return true
            case .sym__statement: return false
            case .anon_sym_POUNDelse: return true
            case .anon_sym_STAR_EQ: return true
            case .sym_conditional_expression: return true
            case .sym_labeled_statement: return true
            case .anon_sym_LBRACK: return true
            case .aux_sym_compound_statement_repeat1: return false
            case .anon_sym_short: return true
            case .sym_array_declarator: return true
            case .anon_sym_case: return true
            case .anon_sym_DASH_DASH: return true
            case .anon_sym_long: return true
            case .anon_sym_GT: return true
            case .sym_logical_expression: return true
            case .sym_pointer_expression: return true
            case .anon_sym_AMP_AMP: return true
            case .anon_sym_SLASH: return true
            case .anon_sym_do: return true
            case .sym_designator: return true
            case .anon_sym_enum: return true
            case .sym_function_declarator: return true
            case .sym_type_name: return true
            case .anon_sym_LT_LT_EQ: return true
            case .aux_sym__initializer_list_contents_repeat1: return false
            case .aux_sym_translation_unit_repeat1: return false
//          case .ts_builtin_sym_error: return true
            case .anon_sym_LPAREN: return true
            case .sym_assignment_expression: return true
            case .anon_sym_PERCENT_EQ: return true
            case .anon_sym_COMMA: return true
            case .anon_sym_LF: return true
            case .sym_translation_unit: return true
            case .anon_sym_PIPE: return true
            case .anon_sym_POUNDendif: return true
            case .anon_sym_unsigned: return true
        }
    }
    var named: Bool {
        switch(self) {
            case .sym_abstract_array_declarator: return true
            case .anon_sym_PLUS: return true
            case .anon_sym_POUNDifndef: return true
            case .anon_sym_EQ: return true
            case .anon_sym_PLUS_PLUS: return true
            case .anon_sym_goto: return true
            case .anon_sym_LBRACE: return true
            case .aux_sym_array_declarator_repeat1: return false
            case .sym_enumerator: return true
            case .sym_for_statement: return true
            case .sym__preproc_statement: return false
            case .sym_bitwise_expression: return true
            case .sym_function_definition: return true
            case .sym_struct_specifier: return true
            case .sym_switch_statement: return true
            case .anon_sym_RBRACK: return true
            case .anon_sym_PIPE_EQ: return true
            case .anon_sym_restrict: return true
            case .sym_abstract_pointer_declarator: return true
            case .sym_pointer_declarator: return true
            case .sym_enum_specifier: return true
            case .anon_sym_AMP_EQ: return true
            case .anon_sym_GT_GT: return true
            case .sym__declaration_specifiers: return false
            case .anon_sym_DASH_GT: return true
            case .sym_relational_expression: return true
            case .sym_abstract_function_declarator: return true
            case .sym_storage_class_specifier: return true
            case .aux_sym_declaration_repeat1: return false
            case .sym_function_specifier: return true
            case .sym_init_declarator: return true
            case .anon_sym_BANG_EQ: return true
            case .aux_sym_preproc_params_repeat1: return false
            case .aux_sym__declaration_specifiers_repeat1: return false
            case .anon_sym_SEMI: return true
            case .anon_sym_STAR: return true
            case .sym_preproc_directive: return true
            case .anon_sym_return: return true
            case .anon_sym_BANG: return true
            case .sym_system_lib_string: return true
            case .aux_sym_struct_specifier_repeat1: return false
            case .aux_sym_preproc_ifdef_repeat1: return false
            case .anon_sym_register: return true
            case .anon_sym_if: return true
            case .anon_sym_const: return true
            case .anon_sym_extern: return true
            case .anon_sym_AMP: return true
            case .sym__empty_declaration: return false
            case .sym_expression_statement: return true
            case .sym_identifier: return true
            case .sym_parameter_type_list: return true
            case .aux_sym_for_statement_repeat1: return false
            case .sym_call_expression: return true
            case .sym_macro_type_specifier: return true
            case .anon_sym_union: return true
            case .anon_sym_switch: return true
            case .sym_return_statement: return true
            case .anon_sym_CARET: return true
            case .anon_sym_for: return true
            case .sym_preproc_ifdef: return true
            case .sym_preproc_params: return true
            case .anon_sym_CARET_EQ: return true
            case .sym_continue_statement: return true
            case .sym__enum_specifier_contents: return false
//          case .ts_builtin_sym_end: return false
            case .anon_sym_struct: return true
            case .anon_sym_POUNDinclude: return true
            case .anon_sym_EQ_EQ: return true
            case .sym_sized_type_specifier: return true
            case .anon_sym_sizeof: return true
            case .sym__expression: return false
            case .sym_union_specifier: return true
            case .sym_cast_expression: return true
            case .anon_sym_LT: return true
            case .sym_number_literal: return true
            case .sym_compound_statement: return true
            case .sym_while_statement: return true
            case .sym_equality_expression: return true
            case .anon_sym_DOT: return true
            case .anon_sym_COLON: return true
            case .anon_sym_continue: return true
            case .sym__type_specifier: return false
            case .anon_sym_PIPE_PIPE: return true
            case .sym_string_literal: return true
            case .sym__declarator: return false
            case .sym_type_qualifier: return true
            case .sym_preproc_arg: return true
            case .anon_sym_RBRACE: return true
            case .sym_math_expression: return true
            case .sym_char_literal: return true
            case .anon_sym_SLASH_EQ: return true
            case .anon_sym_DASH_EQ: return true
            case .anon_sym_POUNDdefine: return true
            case .sym_struct_declaration: return true
            case .anon_sym_auto: return true
            case .aux_sym_sized_type_specifier_repeat1: return false
            case .sym_case_statement: return true
            case .sym__abstract_declarator: return false
            case .sym_declaration: return true
            case .anon_sym_volatile: return true
            case .anon_sym_LT_LT: return true
            case .sym_subscript_expression: return true
            case .sym_preproc_call: return true
            case .sym_preproc_def: return true
            case .anon_sym_RPAREN: return true
            case .sym_sizeof_expression: return true
            case .anon_sym_static: return true
            case .sym_field_expression: return true
            case .sym_preproc_function_def: return true
            case .sym_preproc_else: return true
            case .sym_shift_expression: return true
            case .aux_sym_struct_declaration_repeat1: return false
            case .sym_if_statement: return true
            case .sym_parameter_declaration: return true
            case .sym_preproc_include: return true
            case .anon_sym_else: return true
            case .anon_sym_while: return true
            case .anon_sym_PERCENT: return true
            case .sym_break_statement: return true
            case .anon_sym_GT_GT_EQ: return true
            case .sym_compound_literal_expression: return true
            case .anon_sym_break: return true
            case .anon_sym_LT_EQ: return true
            case .anon_sym_DASH: return true
            case .sym_initializer_list: return true
            case .anon_sym_TILDE: return true
            case .aux_sym_parameter_type_list_repeat1: return false
            case .anon_sym_QMARK: return true
            case .sym_comment: return true
            case .anon_sym_DOT_DOT_DOT: return true
            case .anon_sym_POUNDifdef: return true
            case .anon_sym_default: return true
            case .sym__initializer_list_contents: return false
            case .anon_sym_GT_EQ: return true
            case .anon_sym_PLUS_EQ: return true
            case .sym_goto_statement: return true
            case .anon_sym_typedef: return true
            case .sym_do_statement: return true
            case .sym__statement: return false
            case .anon_sym_POUNDelse: return true
            case .anon_sym_STAR_EQ: return true
            case .sym_conditional_expression: return true
            case .sym_labeled_statement: return true
            case .anon_sym_LBRACK: return true
            case .aux_sym_compound_statement_repeat1: return false
            case .anon_sym_short: return true
            case .sym_array_declarator: return true
            case .anon_sym_case: return true
            case .anon_sym_DASH_DASH: return true
            case .anon_sym_long: return true
            case .anon_sym_GT: return true
            case .sym_logical_expression: return true
            case .sym_pointer_expression: return true
            case .anon_sym_AMP_AMP: return true
            case .anon_sym_SLASH: return true
            case .anon_sym_do: return true
            case .sym_designator: return true
            case .anon_sym_enum: return true
            case .sym_function_declarator: return true
            case .sym_type_name: return true
            case .anon_sym_LT_LT_EQ: return true
            case .aux_sym__initializer_list_contents_repeat1: return false
            case .aux_sym_translation_unit_repeat1: return false
//          case .ts_builtin_sym_error: return true
            case .anon_sym_LPAREN: return true
            case .sym_assignment_expression: return true
            case .anon_sym_PERCENT_EQ: return true
            case .anon_sym_COMMA: return true
            case .anon_sym_LF: return true
            case .sym_translation_unit: return true
            case .anon_sym_PIPE: return true
            case .anon_sym_POUNDendif: return true
            case .anon_sym_unsigned: return true
        }
    }
    var structural: Bool {
        switch(self) {
            case .sym_abstract_array_declarator: return true
            case .anon_sym_PLUS: return true
            case .anon_sym_POUNDifndef: return true
            case .anon_sym_EQ: return true
            case .anon_sym_PLUS_PLUS: return true
            case .anon_sym_goto: return true
            case .anon_sym_LBRACE: return true
            case .aux_sym_array_declarator_repeat1: return false
            case .sym_enumerator: return true
            case .sym_for_statement: return true
            case .sym__preproc_statement: return false
            case .sym_bitwise_expression: return true
            case .sym_function_definition: return true
            case .sym_struct_specifier: return true
            case .sym_switch_statement: return true
            case .anon_sym_RBRACK: return true
            case .anon_sym_PIPE_EQ: return true
            case .anon_sym_restrict: return true
            case .sym_abstract_pointer_declarator: return true
            case .sym_pointer_declarator: return true
            case .sym_enum_specifier: return true
            case .anon_sym_AMP_EQ: return true
            case .anon_sym_GT_GT: return true
            case .sym__declaration_specifiers: return false
            case .anon_sym_DASH_GT: return true
            case .sym_relational_expression: return true
            case .sym_abstract_function_declarator: return true
            case .sym_storage_class_specifier: return true
            case .aux_sym_declaration_repeat1: return false
            case .sym_function_specifier: return true
            case .sym_init_declarator: return true
            case .anon_sym_BANG_EQ: return true
            case .aux_sym_preproc_params_repeat1: return false
            case .aux_sym__declaration_specifiers_repeat1: return false
            case .anon_sym_SEMI: return true
            case .anon_sym_STAR: return true
            case .sym_preproc_directive: return true
            case .anon_sym_return: return true
            case .anon_sym_BANG: return true
            case .sym_system_lib_string: return true
            case .aux_sym_struct_specifier_repeat1: return false
            case .aux_sym_preproc_ifdef_repeat1: return false
            case .anon_sym_register: return true
            case .anon_sym_if: return true
            case .anon_sym_const: return true
            case .anon_sym_extern: return true
            case .anon_sym_AMP: return true
            case .sym__empty_declaration: return false
            case .sym_expression_statement: return true
            case .sym_identifier: return true
            case .sym_parameter_type_list: return true
            case .aux_sym_for_statement_repeat1: return false
            case .sym_call_expression: return true
            case .sym_macro_type_specifier: return true
            case .anon_sym_union: return true
            case .anon_sym_switch: return true
            case .sym_return_statement: return true
            case .anon_sym_CARET: return true
            case .anon_sym_for: return true
            case .sym_preproc_ifdef: return true
            case .sym_preproc_params: return true
            case .anon_sym_CARET_EQ: return true
            case .sym_continue_statement: return true
            case .sym__enum_specifier_contents: return false
//          case .ts_builtin_sym_end: return false
            case .anon_sym_struct: return true
            case .anon_sym_POUNDinclude: return true
            case .anon_sym_EQ_EQ: return true
            case .sym_sized_type_specifier: return true
            case .anon_sym_sizeof: return true
            case .sym__expression: return false
            case .sym_union_specifier: return true
            case .sym_cast_expression: return true
            case .anon_sym_LT: return true
            case .sym_number_literal: return true
            case .sym_compound_statement: return true
            case .sym_while_statement: return true
            case .sym_equality_expression: return true
            case .anon_sym_DOT: return true
            case .anon_sym_COLON: return true
            case .anon_sym_continue: return true
            case .sym__type_specifier: return false
            case .anon_sym_PIPE_PIPE: return true
            case .sym_string_literal: return true
            case .sym__declarator: return false
            case .sym_type_qualifier: return true
            case .sym_preproc_arg: return true
            case .anon_sym_RBRACE: return true
            case .sym_math_expression: return true
            case .sym_char_literal: return true
            case .anon_sym_SLASH_EQ: return true
            case .anon_sym_DASH_EQ: return true
            case .anon_sym_POUNDdefine: return true
            case .sym_struct_declaration: return true
            case .anon_sym_auto: return true
            case .aux_sym_sized_type_specifier_repeat1: return false
            case .sym_case_statement: return true
            case .sym__abstract_declarator: return false
            case .sym_declaration: return true
            case .anon_sym_volatile: return true
            case .anon_sym_LT_LT: return true
            case .sym_subscript_expression: return true
            case .sym_preproc_call: return true
            case .sym_preproc_def: return true
            case .anon_sym_RPAREN: return true
            case .sym_sizeof_expression: return true
            case .anon_sym_static: return true
            case .sym_field_expression: return true
            case .sym_preproc_function_def: return true
            case .sym_preproc_else: return true
            case .sym_shift_expression: return true
            case .aux_sym_struct_declaration_repeat1: return false
            case .sym_if_statement: return true
            case .sym_parameter_declaration: return true
            case .sym_preproc_include: return true
            case .anon_sym_else: return true
            case .anon_sym_while: return true
            case .anon_sym_PERCENT: return true
            case .sym_break_statement: return true
            case .anon_sym_GT_GT_EQ: return true
            case .sym_compound_literal_expression: return true
            case .anon_sym_break: return true
            case .anon_sym_LT_EQ: return true
            case .anon_sym_DASH: return true
            case .sym_initializer_list: return true
            case .anon_sym_TILDE: return true
            case .aux_sym_parameter_type_list_repeat1: return false
            case .anon_sym_QMARK: return true
            case .sym_comment: return true
            case .anon_sym_DOT_DOT_DOT: return true
            case .anon_sym_POUNDifdef: return true
            case .anon_sym_default: return true
            case .sym__initializer_list_contents: return false
            case .anon_sym_GT_EQ: return true
            case .anon_sym_PLUS_EQ: return true
            case .sym_goto_statement: return true
            case .anon_sym_typedef: return true
            case .sym_do_statement: return true
            case .sym__statement: return false
            case .anon_sym_POUNDelse: return true
            case .anon_sym_STAR_EQ: return true
            case .sym_conditional_expression: return true
            case .sym_labeled_statement: return true
            case .anon_sym_LBRACK: return true
            case .aux_sym_compound_statement_repeat1: return false
            case .anon_sym_short: return true
            case .sym_array_declarator: return true
            case .anon_sym_case: return true
            case .anon_sym_DASH_DASH: return true
            case .anon_sym_long: return true
            case .anon_sym_GT: return true
            case .sym_logical_expression: return true
            case .sym_pointer_expression: return true
            case .anon_sym_AMP_AMP: return true
            case .anon_sym_SLASH: return true
            case .anon_sym_do: return true
            case .sym_designator: return true
            case .anon_sym_enum: return true
            case .sym_function_declarator: return true
            case .sym_type_name: return true
            case .anon_sym_LT_LT_EQ: return true
            case .aux_sym__initializer_list_contents_repeat1: return false
            case .aux_sym_translation_unit_repeat1: return false
//          case .ts_builtin_sym_error: return true
            case .anon_sym_LPAREN: return true
            case .sym_assignment_expression: return true
            case .anon_sym_PERCENT_EQ: return true
            case .anon_sym_COMMA: return true
            case .anon_sym_LF: return true
            case .sym_translation_unit: return true
            case .anon_sym_PIPE: return true
            case .anon_sym_POUNDendif: return true
            case .anon_sym_unsigned: return true
        }
    }
    var extra: Bool {
        switch(self) {
            case .sym_abstract_array_declarator: return true
            case .anon_sym_PLUS: return true
            case .anon_sym_POUNDifndef: return true
            case .anon_sym_EQ: return true
            case .anon_sym_PLUS_PLUS: return true
            case .anon_sym_goto: return true
            case .anon_sym_LBRACE: return true
            case .aux_sym_array_declarator_repeat1: return false
            case .sym_enumerator: return true
            case .sym_for_statement: return true
            case .sym__preproc_statement: return false
            case .sym_bitwise_expression: return true
            case .sym_function_definition: return true
            case .sym_struct_specifier: return true
            case .sym_switch_statement: return true
            case .anon_sym_RBRACK: return true
            case .anon_sym_PIPE_EQ: return true
            case .anon_sym_restrict: return true
            case .sym_abstract_pointer_declarator: return true
            case .sym_pointer_declarator: return true
            case .sym_enum_specifier: return true
            case .anon_sym_AMP_EQ: return true
            case .anon_sym_GT_GT: return true
            case .sym__declaration_specifiers: return false
            case .anon_sym_DASH_GT: return true
            case .sym_relational_expression: return true
            case .sym_abstract_function_declarator: return true
            case .sym_storage_class_specifier: return true
            case .aux_sym_declaration_repeat1: return false
            case .sym_function_specifier: return true
            case .sym_init_declarator: return true
            case .anon_sym_BANG_EQ: return true
            case .aux_sym_preproc_params_repeat1: return false
            case .aux_sym__declaration_specifiers_repeat1: return false
            case .anon_sym_SEMI: return true
            case .anon_sym_STAR: return true
            case .sym_preproc_directive: return true
            case .anon_sym_return: return true
            case .anon_sym_BANG: return true
            case .sym_system_lib_string: return true
            case .aux_sym_struct_specifier_repeat1: return false
            case .aux_sym_preproc_ifdef_repeat1: return false
            case .anon_sym_register: return true
            case .anon_sym_if: return true
            case .anon_sym_const: return true
            case .anon_sym_extern: return true
            case .anon_sym_AMP: return true
            case .sym__empty_declaration: return false
            case .sym_expression_statement: return true
            case .sym_identifier: return true
            case .sym_parameter_type_list: return true
            case .aux_sym_for_statement_repeat1: return false
            case .sym_call_expression: return true
            case .sym_macro_type_specifier: return true
            case .anon_sym_union: return true
            case .anon_sym_switch: return true
            case .sym_return_statement: return true
            case .anon_sym_CARET: return true
            case .anon_sym_for: return true
            case .sym_preproc_ifdef: return true
            case .sym_preproc_params: return true
            case .anon_sym_CARET_EQ: return true
            case .sym_continue_statement: return true
            case .sym__enum_specifier_contents: return false
//          case .ts_builtin_sym_end: return false
            case .anon_sym_struct: return true
            case .anon_sym_POUNDinclude: return true
            case .anon_sym_EQ_EQ: return true
            case .sym_sized_type_specifier: return true
            case .anon_sym_sizeof: return true
            case .sym__expression: return false
            case .sym_union_specifier: return true
            case .sym_cast_expression: return true
            case .anon_sym_LT: return true
            case .sym_number_literal: return true
            case .sym_compound_statement: return true
            case .sym_while_statement: return true
            case .sym_equality_expression: return true
            case .anon_sym_DOT: return true
            case .anon_sym_COLON: return true
            case .anon_sym_continue: return true
            case .sym__type_specifier: return false
            case .anon_sym_PIPE_PIPE: return true
            case .sym_string_literal: return true
            case .sym__declarator: return false
            case .sym_type_qualifier: return true
            case .sym_preproc_arg: return true
            case .anon_sym_RBRACE: return true
            case .sym_math_expression: return true
            case .sym_char_literal: return true
            case .anon_sym_SLASH_EQ: return true
            case .anon_sym_DASH_EQ: return true
            case .anon_sym_POUNDdefine: return true
            case .sym_struct_declaration: return true
            case .anon_sym_auto: return true
            case .aux_sym_sized_type_specifier_repeat1: return false
            case .sym_case_statement: return true
            case .sym__abstract_declarator: return false
            case .sym_declaration: return true
            case .anon_sym_volatile: return true
            case .anon_sym_LT_LT: return true
            case .sym_subscript_expression: return true
            case .sym_preproc_call: return true
            case .sym_preproc_def: return true
            case .anon_sym_RPAREN: return true
            case .sym_sizeof_expression: return true
            case .anon_sym_static: return true
            case .sym_field_expression: return true
            case .sym_preproc_function_def: return true
            case .sym_preproc_else: return true
            case .sym_shift_expression: return true
            case .aux_sym_struct_declaration_repeat1: return false
            case .sym_if_statement: return true
            case .sym_parameter_declaration: return true
            case .sym_preproc_include: return true
            case .anon_sym_else: return true
            case .anon_sym_while: return true
            case .anon_sym_PERCENT: return true
            case .sym_break_statement: return true
            case .anon_sym_GT_GT_EQ: return true
            case .sym_compound_literal_expression: return true
            case .anon_sym_break: return true
            case .anon_sym_LT_EQ: return true
            case .anon_sym_DASH: return true
            case .sym_initializer_list: return true
            case .anon_sym_TILDE: return true
            case .aux_sym_parameter_type_list_repeat1: return false
            case .anon_sym_QMARK: return true
            case .sym_comment: return true
            case .anon_sym_DOT_DOT_DOT: return true
            case .anon_sym_POUNDifdef: return true
            case .anon_sym_default: return true
            case .sym__initializer_list_contents: return false
            case .anon_sym_GT_EQ: return true
            case .anon_sym_PLUS_EQ: return true
            case .sym_goto_statement: return true
            case .anon_sym_typedef: return true
            case .sym_do_statement: return true
            case .sym__statement: return false
            case .anon_sym_POUNDelse: return true
            case .anon_sym_STAR_EQ: return true
            case .sym_conditional_expression: return true
            case .sym_labeled_statement: return true
            case .anon_sym_LBRACK: return true
            case .aux_sym_compound_statement_repeat1: return false
            case .anon_sym_short: return true
            case .sym_array_declarator: return true
            case .anon_sym_case: return true
            case .anon_sym_DASH_DASH: return true
            case .anon_sym_long: return true
            case .anon_sym_GT: return true
            case .sym_logical_expression: return true
            case .sym_pointer_expression: return true
            case .anon_sym_AMP_AMP: return true
            case .anon_sym_SLASH: return true
            case .anon_sym_do: return true
            case .sym_designator: return true
            case .anon_sym_enum: return true
            case .sym_function_declarator: return true
            case .sym_type_name: return true
            case .anon_sym_LT_LT_EQ: return true
            case .aux_sym__initializer_list_contents_repeat1: return false
            case .aux_sym_translation_unit_repeat1: return false
//          case .ts_builtin_sym_error: return true
            case .anon_sym_LPAREN: return true
            case .sym_assignment_expression: return true
            case .anon_sym_PERCENT_EQ: return true
            case .anon_sym_COMMA: return true
            case .anon_sym_LF: return true
            case .sym_translation_unit: return true
            case .anon_sym_PIPE: return true
            case .anon_sym_POUNDendif: return true
            case .anon_sym_unsigned: return true
        }
    }
}
