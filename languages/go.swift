


public enum Go: UInt16 {
    case anon_sym_LF = 1
    case anon_sym_SEMI = 2
    case anon_sym_package = 3
    case anon_sym_import = 4
    case anon_sym_LPAREN = 5
    case anon_sym_RPAREN = 6
    case anon_sym_DOT = 7
    case anon_sym_const = 8
    case anon_sym_EQ = 9
    case anon_sym_var = 10
    case anon_sym_func = 11
    case anon_sym_COMMA = 12
    case anon_sym_DOT_DOT_DOT = 13
    case anon_sym_type = 14
    case anon_sym_STAR = 15
    case anon_sym_LBRACK = 16
    case anon_sym_RBRACK = 17
    case anon_sym_struct = 18
    case anon_sym_LBRACE = 19
    case anon_sym_RBRACE = 20
    case anon_sym_interface = 21
    case anon_sym_map = 22
    case anon_sym_chan = 23
    case anon_sym_LT_DASH = 24
    case anon_sym_COLON_EQ = 25
    case anon_sym_PLUS_PLUS = 26
    case anon_sym_DASH_DASH = 27
    case anon_sym_COLON = 28
    case sym_fallthrough_statement = 29
    case anon_sym_break = 30
    case anon_sym_continue = 31
    case anon_sym_goto = 32
    case anon_sym_return = 33
    case anon_sym_go = 34
    case anon_sym_defer = 35
    case anon_sym_if = 36
    case anon_sym_else = 37
    case anon_sym_for = 38
    case anon_sym_range = 39
    case anon_sym_switch = 40
    case anon_sym_case = 41
    case anon_sym_default = 42
    case anon_sym_select = 43
    case anon_sym_PLUS = 44
    case anon_sym_DASH = 45
    case anon_sym_BANG = 46
    case anon_sym_CARET = 47
    case anon_sym_AMP = 48
    case aux_sym_SLASH_LPAREN_STAR_PIPE_SLASH_PIPE_PERCENT_PIPE_LT_LT_PIPE_GT_GT_PIPE_AMP_PIPE_AMP_CARET_RPAREN_SLASH = 49
    case aux_sym_SLASH_LPAREN_PLUS_PIPE_DASH_PIPE_PIPE_PIPE_CARET_RPAREN_SLASH = 50
    case aux_sym_SLASH_LPAREN_EQ_EQ_PIPE_BANG_EQ_PIPE_LT_PIPE_LT_EQ_PIPE_GT_PIPE_GT_EQ_RPAREN_SLASH = 51
    case anon_sym_AMP_AMP = 52
    case anon_sym_PIPE_PIPE = 53
    case sym_identifier = 54
    case sym_raw_string_literal = 55
    case sym_interpreted_string_literal = 56
    case sym_int_literal = 57
    case sym_float_literal = 58
    case sym_imaginary_literal = 59
    case sym_rune_literal = 60
    case sym__assignment_operator = 61
    case sym_comment = 62
    case sym_source_file = 63
    case sym_package_clause = 64
    case sym_import_declaration = 65
    case sym_import_spec = 66
    case sym__top_level_declaration = 67
    case sym__declaration = 68
    case sym_const_declaration = 69
    case sym_const_spec = 70
    case sym_var_declaration = 71
    case sym_var_spec = 72
    case sym_function_declaration = 73
    case sym_method_declaration = 74
    case sym_parameters = 75
    case sym__parameter_list = 76
    case sym_parameter_declaration = 77
    case sym_type_declaration = 78
    case sym_type_spec = 79
    case sym_identifier_list = 80
    case sym_expression_list = 81
    case sym__type = 82
    case sym__simple_type = 83
    case sym_pointer_type = 84
    case sym_array_type = 85
    case sym_implicit_length_array_type = 86
    case sym_slice_type = 87
    case sym_struct_type = 88
    case sym__field_declaration_list = 89
    case sym_field_declaration = 90
    case sym_interface_type = 91
    case sym__method_spec_list = 92
    case sym_method_spec = 93
    case sym_map_type = 94
    case sym_channel_type = 95
    case sym_function_type = 96
    case sym_block = 97
    case sym__statement_list = 98
    case sym__statement = 99
    case sym_empty_statement = 100
    case sym__simple_statement = 101
    case sym_send_statement = 102
    case sym_receive_statement = 103
    case sym_inc_statement = 104
    case sym_dec_statement = 105
    case sym_assignment_statement = 106
    case sym_short_var_declaration = 107
    case sym_label_statement = 108
    case sym_break_statement = 109
    case sym_continue_statement = 110
    case sym_goto_statement = 111
    case sym_return_statement = 112
    case sym_go_statement = 113
    case sym_defer_statement = 114
    case sym_if_statement = 115
    case sym_for_statement = 116
    case sym_for_clause = 117
    case sym_range_clause = 118
    case sym_expression_switch_statement = 119
    case sym_expression_case_clause = 120
    case sym_expression_case = 121
    case sym_type_switch_statement = 122
    case sym__type_switch_guard = 123
    case sym_type_case_clause = 124
    case sym_type_case = 125
    case sym_select_statement = 126
    case sym_communication_clause = 127
    case sym_communication_case = 128
    case sym__expression = 129
    case sym_call_expression = 130
    case sym__argument_list = 131
    case sym_selector_expression = 132
    case sym_index_expression = 133
    case sym_slice_expression = 134
    case sym_type_assertion_expression = 135
    case sym_type_conversion_expression = 136
    case sym_composite_literal = 137
    case sym_literal_value = 138
    case sym__element_list = 139
    case sym_keyed_element = 140
    case sym_element = 141
    case sym_func_literal = 142
    case sym_unary_expression = 143
    case sym_binary_expression = 144
    case sym_qualified_identifier = 145
    case sym__string_literal = 146
    case aux_sym_source_file_repeat1 = 147
    case aux_sym_source_file_repeat2 = 148
    case aux_sym_import_declaration_repeat1 = 149
    case aux_sym_const_declaration_repeat1 = 150
    case aux_sym_var_declaration_repeat1 = 151
    case aux_sym_type_declaration_repeat1 = 152
    case aux_sym_identifier_list_repeat1 = 153
    case aux_sym_expression_list_repeat1 = 154
    case aux_sym_expression_switch_statement_repeat1 = 155
    case aux_sym_type_switch_statement_repeat1 = 156
    case aux_sym_type_case_repeat1 = 157
    case aux_sym_select_statement_repeat1 = 158
};
