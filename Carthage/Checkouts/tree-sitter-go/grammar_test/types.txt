============================================
Qualified type names
============================================

package main

type a b.c

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (qualified_identifier (identifier) (identifier)))))

============================================
Array types
============================================

package main

type a [2+2]c

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (array_type
        (binary_expression (int_literal) (int_literal))
        (identifier)))))

============================================
Slice types
============================================

package main

type a []c
type b [][]d

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (slice_type (identifier))))
  (type_declaration
    (type_spec
      (identifier)
      (slice_type (slice_type (identifier))))))

============================================
Struct types
============================================

package main

type s1 struct {}

type s2 struct { Person }

type s2 struct {
  f, g int
}

type s3 struct {
  // an embedded struct
  p.s1

  // a tag
  h int `json:"h"`
}

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (struct_type)))
  (type_declaration
    (type_spec
      (identifier)
      (struct_type (field_declaration (identifier)))))
  (type_declaration
    (type_spec
      (identifier)
      (struct_type
        (field_declaration
          (identifier_list (identifier) (identifier))
          (identifier)))))
  (type_declaration
    (type_spec
      (identifier)
      (struct_type
        (comment)
        (field_declaration
          (qualified_identifier (identifier) (identifier)))
        (comment)
        (field_declaration
          (identifier_list (identifier))
          (identifier)
          (raw_string_literal))))))

============================================
Interface types
============================================

package main

type i1 interface {}

type i1 interface { io.Reader }

type i2 interface {
  i1
  io.Reader
  SomeMethod(s string) error
}

---

(source_file
  (package_clause (identifier))
  (type_declaration (type_spec
    (identifier)
    (interface_type)))
  (type_declaration (type_spec
    (identifier)
    (interface_type
      (qualified_identifier (identifier) (identifier)))))
  (type_declaration (type_spec
    (identifier)
    (interface_type
      (identifier)
      (qualified_identifier (identifier) (identifier))
      (method_spec
        (identifier)
        (parameters (parameter_declaration (identifier) (identifier)))
        (identifier))))))

============================================
Map types
============================================

package main

type m1 map[string]error

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (map_type (identifier) (identifier)))))

============================================
Pointer types
============================================

package main

type (
  p1 *string
  p2 **p1
)

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (pointer_type (identifier)))
    (type_spec
      (identifier)
      (pointer_type (pointer_type (identifier))))))

============================================
Channel types
============================================

package main

type (
  c1 chan<- chan int
  c2 chan<- chan<- struct{}
  c3 chan<- <-chan int
)

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (channel_type (channel_type (identifier))))
    (type_spec
      (identifier)
      (channel_type (channel_type (struct_type))))
    (type_spec
      (identifier)
      (channel_type (channel_type (identifier))))))

============================================
Function types
============================================

package main

type (
  a func(int) int
  b func(int, *string) (bool, error)
)

---

(source_file
  (package_clause (identifier))
  (type_declaration
    (type_spec
      (identifier)
      (function_type
        (parameters
          (identifier))
        (identifier)))
    (type_spec
      (identifier)
      (function_type
        (parameters
          (identifier)
          (parameter_declaration (pointer_type (identifier))))
        (parameters
          (identifier)
          (identifier))))))
